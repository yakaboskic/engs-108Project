{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deep Learning with Cyrillic Data \n",
    "Chase Yakaboski, 10/23/2018\n",
    "\n",
    "## 1. Data Preparation\n",
    "    - Image loading function\n",
    "    - Load in of images \n",
    "    - Plot histogram of Labels\n",
    "    \n",
    "## 2. Deep Fully Connected Neural Network\n",
    "    - Preprocess Data\n",
    "    - Split Data into Training and Testing\n",
    "    - Define Model\n",
    "    - Compile Model\n",
    "    - Run Model\n",
    "    - Analysis\n",
    "\n",
    "## 3. Deep Convolutional Neural Network\n",
    "    - Preprocess Data\n",
    "    - Split Data into Training and Testing\n",
    "    - Define Model\n",
    "    - Compile Model\n",
    "    - Run Model\n",
    "    - Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.11.0\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import cv2\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#-- Function to Load in Data\n",
    "#-- This Function expects images to be in seperated folders in which each folder is a different character. \n",
    "\n",
    "def load_images(path_to_images='/Users/Chase/Documents/Dartmouth/courses/engs-108/homework/Cyrillic', image_size=40):\n",
    "    #-- First we change directory to the path to images.\n",
    "    os.chdir(path_to_images)\n",
    "    letter_class = [name for name in os.listdir() if os.path.isdir(name)]\n",
    "    num_classes = len(letter_class)\n",
    "\n",
    "    images = []\n",
    "    images_2d = []\n",
    "    labels = []\n",
    "    for i in range(0, num_classes):\n",
    "        for j, file in enumerate(os.listdir(os.path.join(os.getcwd(), letter_class[i]))):\n",
    "            try:\n",
    "                path = os.path.join(os.getcwd(), letter_class[i], file)\n",
    "                im = cv2.imread(path, cv2.IMREAD_UNCHANGED)\n",
    "                res = cv2.resize(im, dsize=(image_size, image_size))\n",
    "                r,g,b,a = cv2.split(res)\n",
    "                im = np.array(a)\n",
    "                #- Add a dummy dimension\n",
    "                im = np.expand_dims(im, axis=2)\n",
    "                images_2d.append(im)\n",
    "                im_alpha = np.squeeze(im.reshape(-1, image_size**2),axis=0)\n",
    "                #- Normalize Pixel Values\n",
    "                im_alpha2 = im_alpha / 255.0 \n",
    "                images.append(im_alpha2)\n",
    "                labels.append(i)\n",
    "            except:\n",
    "                print('Bad Files:')\n",
    "                print(path)\n",
    "                continue\n",
    "    images = np.array(images)\n",
    "    labels = np.array(labels)\n",
    "    images_2d = np.array(images_2d)\n",
    "    labels_2d = keras.utils.to_categorical(labels, num_classes = num_classes)\n",
    "    \n",
    "    return images, images_2d, labels, labels_2d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bad Files:\n",
      "/Users/Chase/Documents/Dartmouth/courses/engs-108/homework/Cyrillic/Ð—/.DS_Store\n"
     ]
    }
   ],
   "source": [
    "images, images_2d, labels, labels_2d = load_images(image_size=28)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Now lets plot the labels to make sure each Cyrillic letter has about the same number of samples. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([444., 463., 462., 551., 459., 474., 458., 447., 427., 415., 465.,\n",
       "        431., 456., 469., 486., 344., 466., 247., 576., 493., 487., 464.,\n",
       "        461., 433., 446., 470., 431., 508., 438., 459., 424., 448., 465.,\n",
       "        513.]),\n",
       " array([ 0.        ,  0.97058824,  1.94117647,  2.91176471,  3.88235294,\n",
       "         4.85294118,  5.82352941,  6.79411765,  7.76470588,  8.73529412,\n",
       "         9.70588235, 10.67647059, 11.64705882, 12.61764706, 13.58823529,\n",
       "        14.55882353, 15.52941176, 16.5       , 17.47058824, 18.44117647,\n",
       "        19.41176471, 20.38235294, 21.35294118, 22.32352941, 23.29411765,\n",
       "        24.26470588, 25.23529412, 26.20588235, 27.17647059, 28.14705882,\n",
       "        29.11764706, 30.08823529, 31.05882353, 32.02941176, 33.        ]),\n",
       " <a list of 34 Patch objects>)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1245ff358>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(labels, bins=34)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Deep Fully Connected Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#-- Preprocess\n",
    "random_seed = 2\n",
    "samples_train, samples_test, labels_train, labels_test =  train_test_split(images, labels, \n",
    "                                                                           test_size=.3, \n",
    "                                                                           random_state=random_seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#-- Build Deep Model\n",
    "model = keras.Sequential()\n",
    "model.add(keras.layers.Dense(500, input_shape=samples_train[0].shape))\n",
    "model.add(keras.layers.Dense(400, activation=tf.nn.relu))\n",
    "model.add(keras.layers.Dense(300, activation=tf.nn.relu))\n",
    "model.add(keras.layers.Dense(200, activation=tf.nn.relu))\n",
    "model.add(keras.layers.Dropout(.1))\n",
    "model.add(keras.layers.Dense(100, activation=tf.nn.relu))\n",
    "model.add(keras.layers.Dense(80, activation=tf.nn.relu))\n",
    "model.add(keras.layers.Dense(60, activation=tf.nn.relu))\n",
    "model.add(keras.layers.Dropout(.3))\n",
    "model.add(keras.layers.Dense(50, activation=tf.nn.relu))\n",
    "model.add(keras.layers.Dense(45, activation=tf.nn.relu))\n",
    "model.add(keras.layers.Dense(40, activation=tf.nn.relu))\n",
    "model.add(keras.layers.Dense(34, activation=tf.nn.softmax))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#-- Compile Model\n",
    "model.compile(optimizer=tf.train.AdamOptimizer(), \n",
    "              loss='sparse_categorical_crossentropy',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 10836 samples, validate on 4644 samples\n",
      "Epoch 1/30\n",
      "10836/10836 [==============================] - 3s 275us/step - loss: 3.1619 - acc: 0.0929 - val_loss: 2.7780 - val_acc: 0.1654\n",
      "Epoch 2/30\n",
      "10836/10836 [==============================] - 2s 206us/step - loss: 2.5285 - acc: 0.2193 - val_loss: 2.2254 - val_acc: 0.3081\n",
      "Epoch 3/30\n",
      "10836/10836 [==============================] - 2s 201us/step - loss: 2.0180 - acc: 0.3555 - val_loss: 1.7936 - val_acc: 0.4453\n",
      "Epoch 4/30\n",
      "10836/10836 [==============================] - 2s 200us/step - loss: 1.6024 - acc: 0.4839 - val_loss: 1.5811 - val_acc: 0.5069\n",
      "Epoch 5/30\n",
      "10836/10836 [==============================] - 2s 212us/step - loss: 1.3153 - acc: 0.5801 - val_loss: 1.3860 - val_acc: 0.5889\n",
      "Epoch 6/30\n",
      "10836/10836 [==============================] - 2s 207us/step - loss: 1.0836 - acc: 0.6600 - val_loss: 1.2314 - val_acc: 0.6505\n",
      "Epoch 7/30\n",
      "10836/10836 [==============================] - 2s 213us/step - loss: 0.9252 - acc: 0.7158 - val_loss: 1.1222 - val_acc: 0.6785\n",
      "Epoch 8/30\n",
      "10836/10836 [==============================] - 2s 204us/step - loss: 0.8010 - acc: 0.7518 - val_loss: 1.1560 - val_acc: 0.6860\n",
      "Epoch 9/30\n",
      "10836/10836 [==============================] - 2s 206us/step - loss: 0.7175 - acc: 0.7796 - val_loss: 1.0535 - val_acc: 0.7132\n",
      "Epoch 10/30\n",
      "10836/10836 [==============================] - 2s 205us/step - loss: 0.6065 - acc: 0.8153 - val_loss: 1.0859 - val_acc: 0.7099\n",
      "Epoch 11/30\n",
      "10836/10836 [==============================] - 2s 206us/step - loss: 0.5583 - acc: 0.8281 - val_loss: 1.1216 - val_acc: 0.7224\n",
      "Epoch 12/30\n",
      "10836/10836 [==============================] - 2s 211us/step - loss: 0.5151 - acc: 0.8510 - val_loss: 1.0608 - val_acc: 0.7474\n",
      "Epoch 13/30\n",
      "10836/10836 [==============================] - 2s 216us/step - loss: 0.4373 - acc: 0.8660 - val_loss: 1.1063 - val_acc: 0.7300\n",
      "Epoch 14/30\n",
      "10836/10836 [==============================] - 2s 216us/step - loss: 0.4252 - acc: 0.8771 - val_loss: 1.0671 - val_acc: 0.7494\n",
      "Epoch 15/30\n",
      "10836/10836 [==============================] - 2s 210us/step - loss: 0.3777 - acc: 0.8873 - val_loss: 1.1939 - val_acc: 0.7302\n",
      "Epoch 16/30\n",
      "10836/10836 [==============================] - 2s 208us/step - loss: 0.3869 - acc: 0.8863 - val_loss: 1.0504 - val_acc: 0.7513\n",
      "Epoch 17/30\n",
      "10836/10836 [==============================] - 2s 224us/step - loss: 0.3179 - acc: 0.9091 - val_loss: 1.2067 - val_acc: 0.7418\n",
      "Epoch 18/30\n",
      "10836/10836 [==============================] - 2s 216us/step - loss: 0.3010 - acc: 0.9108 - val_loss: 1.1039 - val_acc: 0.7578\n",
      "Epoch 19/30\n",
      "10836/10836 [==============================] - 2s 210us/step - loss: 0.3000 - acc: 0.9143 - val_loss: 1.1327 - val_acc: 0.7590\n",
      "Epoch 20/30\n",
      "10836/10836 [==============================] - 2s 209us/step - loss: 0.2866 - acc: 0.9216 - val_loss: 1.0628 - val_acc: 0.7683\n",
      "Epoch 21/30\n",
      "10836/10836 [==============================] - 2s 215us/step - loss: 0.2674 - acc: 0.9281 - val_loss: 1.1325 - val_acc: 0.7681\n",
      "Epoch 22/30\n",
      "10836/10836 [==============================] - 2s 217us/step - loss: 0.2420 - acc: 0.9345 - val_loss: 1.1713 - val_acc: 0.7629\n",
      "Epoch 23/30\n",
      "10836/10836 [==============================] - 2s 213us/step - loss: 0.2158 - acc: 0.9410 - val_loss: 1.1413 - val_acc: 0.7791\n",
      "Epoch 24/30\n",
      "10836/10836 [==============================] - 2s 213us/step - loss: 0.2214 - acc: 0.9419 - val_loss: 1.2047 - val_acc: 0.7679\n",
      "Epoch 25/30\n",
      "10836/10836 [==============================] - 3s 255us/step - loss: 0.2481 - acc: 0.9351 - val_loss: 1.2110 - val_acc: 0.7526\n",
      "Epoch 26/30\n",
      "10836/10836 [==============================] - 7s 638us/step - loss: 0.2197 - acc: 0.9434 - val_loss: 1.1124 - val_acc: 0.7782\n",
      "Epoch 27/30\n",
      "10836/10836 [==============================] - 7s 639us/step - loss: 0.1887 - acc: 0.9518 - val_loss: 1.1972 - val_acc: 0.7836\n",
      "Epoch 28/30\n",
      "10836/10836 [==============================] - 7s 626us/step - loss: 0.1901 - acc: 0.9504 - val_loss: 1.2438 - val_acc: 0.7709\n",
      "Epoch 29/30\n",
      "10836/10836 [==============================] - 7s 626us/step - loss: 0.1958 - acc: 0.9504 - val_loss: 1.2089 - val_acc: 0.7621\n",
      "Epoch 30/30\n",
      "10836/10836 [==============================] - 7s 632us/step - loss: 0.1658 - acc: 0.9556 - val_loss: 1.1849 - val_acc: 0.7853\n"
     ]
    }
   ],
   "source": [
    "#-- Train Model\n",
    "history_full = model.fit(samples_train, labels_train, \n",
    "                         batch_size=50, \n",
    "                         epochs=30, \n",
    "                         validation_data = (samples_test, labels_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4644/4644 [==============================] - 1s 290us/step\n"
     ]
    }
   ],
   "source": [
    "#-- Evaluate\n",
    "test_loss, test_acc = model.evaluate(samples_test, labels_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy =  0.7853143841515935\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy = ', test_acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analysis of Accuracy and Loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x131a8cb70>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(2,1)\n",
    "ax[0].plot(history_full.history['loss'], color='b', label='Training Loss')\n",
    "ax[0].plot(history_full.history['val_loss'], color='r', label='Validation Loss', axes=ax[0])\n",
    "legend= ax[0].legend(loc='best', shadow=True)\n",
    "\n",
    "ax[1].plot(history_full.history['acc'], color='b', label='Training Accuracy')\n",
    "ax[1].plot(history_full.history['val_acc'], color='r', label='Validation Accuracy')\n",
    "legend= ax[1].legend(loc='best', shadow=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Deep Convolutional Neural Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#-- Preprocess\n",
    "random_seed = 2\n",
    "samples_train_2d, samples_test_2d, labels_train_2d, labels_test_2d =  train_test_split(images_2d, labels_2d, \n",
    "                                                                           test_size=0.1, \n",
    "                                                                           random_state=random_seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#-- Build CNN Model\n",
    "model_cnn = keras.Sequential()\n",
    "model_cnn.add(keras.layers.Conv2D(input_shape= samples_train_2d[0].shape, \n",
    "                                  filters=64, \n",
    "                                  kernel_size=(5,5), \n",
    "                                  padding='Same', \n",
    "                                  activation='relu'))\n",
    "\n",
    "model_cnn.add(keras.layers.Conv2D(filters=64, \n",
    "                                  kernel_size=(5,5), \n",
    "                                  padding='Same', \n",
    "                                  activation='relu'))\n",
    "\n",
    "model_cnn.add(keras.layers.MaxPool2D(pool_size=(2,2)))\n",
    "model_cnn.add(keras.layers.Dropout(0.25))\n",
    "\n",
    "model_cnn.add(keras.layers.Conv2D(filters=32, \n",
    "                                  kernel_size=(3,3), \n",
    "                                  padding='Same', \n",
    "                                  activation='relu'))\n",
    "\n",
    "model_cnn.add(keras.layers.Conv2D(filters=32, \n",
    "                                  kernel_size=(3,3), \n",
    "                                  padding='Same', \n",
    "                                  activation='relu'))\n",
    "\n",
    "model_cnn.add(keras.layers.MaxPool2D(pool_size=(2,2), strides=(2,2)))\n",
    "model_cnn.add(keras.layers.Dropout(0.25))\n",
    "\n",
    "model_cnn.add(keras.layers.Flatten())\n",
    "model_cnn.add(keras.layers.Dense(256, activation='relu'))\n",
    "model_cnn.add(keras.layers.Dropout(0.5))\n",
    "model_cnn.add(keras.layers.Dense(34, activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python optimisation variables\n",
    "epochs = 5\n",
    "batch_size = 50\n",
    "\n",
    "#-- Set up the Optimizer\n",
    "optimizer = tf.train.AdamOptimizer()\n",
    "#optimizer = keras.optimizers.RMSprop(lr=0.001, rho=.9, epsilon=1e-08, decay=0.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#-- Compile the Model\n",
    "model_cnn.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 13932 samples, validate on 1548 samples\n",
      "Epoch 1/5\n",
      "13932/13932 [==============================] - 153s 11ms/step - loss: 0.9483 - acc: 0.7105 - val_loss: 0.5276 - val_acc: 0.8437\n",
      "Epoch 2/5\n",
      "13932/13932 [==============================] - 155s 11ms/step - loss: 0.7309 - acc: 0.7751 - val_loss: 0.4869 - val_acc: 0.8463\n",
      "Epoch 3/5\n",
      "13932/13932 [==============================] - 154s 11ms/step - loss: 0.6118 - acc: 0.8079 - val_loss: 0.4171 - val_acc: 0.8773\n",
      "Epoch 4/5\n",
      "13932/13932 [==============================] - 154s 11ms/step - loss: 0.5223 - acc: 0.8353 - val_loss: 0.3433 - val_acc: 0.8889\n",
      "Epoch 5/5\n",
      "13932/13932 [==============================] - 154s 11ms/step - loss: 0.4726 - acc: 0.8496 - val_loss: 0.3386 - val_acc: 0.8895\n"
     ]
    }
   ],
   "source": [
    "history_cnn = model_cnn.fit(samples_train_2d, labels_train_2d, \n",
    "                            batch_size=batch_size, \n",
    "                            epochs=epochs,\n",
    "                            validation_data=(samples_test_2d, labels_test_2d))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analysis of Accuracy and Loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1368d1f98>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(2,1)\n",
    "ax[0].plot(history_cnn.history['loss'], color='b', label='Training Loss')\n",
    "ax[0].plot(history_cnn.history['val_loss'], color='r', label='Validation Loss', axes=ax[0])\n",
    "legend= ax[0].legend(loc='best', shadow=True)\n",
    "\n",
    "ax[1].plot(history_cnn.history['acc'], color='b', label='Training Accuracy')\n",
    "ax[1].plot(history_cnn.history['val_acc'], color='r', label='Validation Accuracy')\n",
    "legend= ax[1].legend(loc='best', shadow=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1548/1548 [==============================] - 5s 3ms/step\n"
     ]
    }
   ],
   "source": [
    "#-- Evaluate\n",
    "test_loss, test_acc = model_cnn.evaluate(samples_test_2d, labels_test_2d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy =  0.889534883566913\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy = ', test_acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clearly this accuracy is much better than then the fully connected network, even though it was only run for five epochs. Running this for longer would even yield better accuracy, but alas I have no more time. Thanks for reading!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
